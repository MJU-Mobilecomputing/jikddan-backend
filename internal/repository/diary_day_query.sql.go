// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: diary_day_query.sql

package repository

import (
	"context"
)

const createDiaryDay = `-- name: CreateDiaryDay :one
INSERT INTO "diary_day" (user_id)
VALUES ($1)
RETURNING id, user_id, created_at, updated_at
`

func (q *Queries) CreateDiaryDay(ctx context.Context, userID int64) (DiaryDay, error) {
	row := q.db.QueryRow(ctx, createDiaryDay, userID)
	var i DiaryDay
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOneDiaryWithMenu = `-- name: FindOneDiaryWithMenu :one
SELECT diary_day_id, user_id, diary_date, diary_menus FROM diary_day_view WHERE diary_day_id = $1 AND EXTRACT(MONTH FROM diary_data) = $2::int
`

type FindOneDiaryWithMenuParams struct {
	DiaryDayID int64 `db:"diary_day_id" json:"diary_day_id"`
	Month      int32 `db:"month" json:"month"`
}

func (q *Queries) FindOneDiaryWithMenu(ctx context.Context, arg FindOneDiaryWithMenuParams) (DiaryDayView, error) {
	row := q.db.QueryRow(ctx, findOneDiaryWithMenu, arg.DiaryDayID, arg.Month)
	var i DiaryDayView
	err := row.Scan(
		&i.DiaryDayID,
		&i.UserID,
		&i.DiaryDate,
		&i.DiaryMenus,
	)
	return i, err
}
